{
    "collab_server" : "",
    "contents" : "spam <-\n  read.csv(\n    \"C:/Users/Nishank/Desktop/SNU/Project/Suspicious/Data/spam.csv\",\n    stringsAsFactors = FALSE\n  )\ndeceptiveOpinion <-\n  read.csv(\n    \"C:/Users/Nishank/Desktop/SNU/Project/Suspicious/Data/deceptive-opinion.csv\",\n    stringsAsFactors = FALSE\n  )\n\nlibrary(tidyverse)\n\nsummary(spam)\nsummary(deceptiveOpinion)\nstr(spam)\n\nspam <- spam[, 1:2]\nstr(deceptiveOpinion)\n\ndeceptiveOpinion <- deceptiveOpinion[, c(1, 5)]\n\n#spam$v2 <- as.factor(spam$v2)\n#class(spam$v2)\n\n#deceptiveOpinion$deceptive <- as.factor(deceptiveOpinion$deceptive)\n\n\ncolnames(spam) <- c(\"suspicious\", \"text\")\ncolnames(deceptiveOpinion) <- c(\"suspicious\", \"text\")\n\nsummary(deceptiveOpinion)\n#deceptiveOpinion <- deceptiveOpinion %>% filter(suspicious==\"deceptive\") %>% mutate(suspicious=\"spam\")\n\ndeceptiveOpinion$suspicious[deceptiveOpinion$suspicious==\"deceptive\"] <- \"suspicious\"\ndeceptiveOpinion$suspicious[deceptiveOpinion$suspicious==\"truthful\"] <- \"safe\"\n\nspam$suspicious[spam$suspicious==\"spam\"] <- \"suspicious\"\nspam$suspicious[spam$suspicious==\"ham\"] <- \"safe\"\n\nsuspDF <- rbind(spam,deceptiveOpinion)\nsuspDF$suspicious <- as.factor(suspDF$suspicious)\nsummary(suspDF)\n\n\nlibrary(tm)\n\nsuspText <- Corpus(VectorSource(suspDF$text))\nsuspText <- tm_map(suspText,tolower)\nsuspText <- tm_map(suspText,removePunctuation)\nsuspText <- tm_map(suspText,removeNumbers)\nsuspText <- tm_map(suspText,removeWords,stopwords(\"english\"))\nsuspText <- tm_map(suspText,stemDocument)\n\nlibrary(tidytext)\n\nsuspText <- tm_map(suspText,removeWords,c(as.character(stop_words)))\nlibrary(wordcloud)\nwordcloud(suspText, min.freq = 75,random.order = FALSE,random.color = FALSE,colors = brewer.pal(9,\"Spectral\"))\n\nlibrary(rpart)\nlibrary(rpart.plot)\nlibrary(caret)\nlibrary(randomForest)\nlibrary(caTools)\n\nfrequencies = DocumentTermMatrix(suspText)\nfrequencies\ninspect(frequencies[1000:1005,505:515])\nfindFreqTerms(frequencies, lowfreq=20)\n\nsparse = removeSparseTerms(frequencies, 0.995)\nsparse\n\nsuspSparse <- as.data.frame(as.matrix(sparse))\ncolnames(suspSparse) <- make.names(colnames(suspSparse))\nsuspSparse$suspicious <- suspDF$suspicious\n\nset.seed(100)\n\ntrainIndex <- createDataPartition(suspSparse$suspicious,p = 0.7, list = FALSE, times = 1)\ntrain <- suspSparse[trainIndex,]\ntest <- suspSparse[-trainIndex,]\n\n\nlogRegModel <- glm(suspicious~., family = \"binomial\",data = train)\nsummary(logRegModel)\nplot(logRegModel$residuals)\n\nlogRegModelPred <- predict(logRegModel,newdata = test,type = \"response\")\ntable(logRegModelPred>0.5,test$suspicious)\n\nlibrary(Metrics)\n#mse(test$suspicious,logRegModelPred)\n\n#Accuracy: 91.49%\n((354+1614)/(354+1614+110+73))\n\nlibrary(ROCR)\nROCRpred <- prediction(logRegModelPred,test$suspicious)\nROCRperf <- performance(ROCRpred,'tpr','fpr')\nplot(ROCRperf,colorize = TRUE, text.adj = c(-0.2,1.7))\n\ncartModel <- rpart(suspicious~., method = \"class\",data = train)\nprp(cartModel)\nfancyRpartPlot(cartModel,type = 2, cex = 0.6)\ncartModelPred <- predict(cartModel,newdata = test,type = \"class\")\ntable(cartModelPred,test$suspicious)\n\n#Accuracy: 87.2%\n(1625+251)/(1625+251+213+62)\n\n#10-fold cross validation\nlibrary(e1071)\n\ntrainControl <- trainControl(method = \"cv\",number = 10)\ncp.grid <- expand.grid(.cp = (0:30)*0.0001)\n\n\n\ncartCVModel <- train(suspicious~.,data = train, trControl = trainControl, method = \"rpart\",tuneGrid = cp.grid)\ncartCVModel\nplot(cartCVModel)\n\ncartCVModelFinal <- rpart(suspicious~., cp = 0.0023, data = train, method = \"class\")\nprp(cartCVModelFinal)\n\nset.seed(100)\nrfModel <- randomForest(suspicious~., data = train)\nrfModelPred <- predict(rfModel, newdata = test)\ntable(rfModelPred, test$suspicious)\n\nplot(rfModel)\n#Accuracy: 93.67%\n(1637+378)/(1637+378+86+50)\n\nsummary(rfModel)\n\nlibrary(rattle)\nprp(cartCVModel$finalModel)\nfancyRpartPlot(cartCVModel$finalModel, cex = 0.6, type = 2)\nnbModel <- train(suspicious~.,data = train, trControl = trainControl, method = \"naive_bayes\")\nsummary(nbModel)\nplot(nbModel$finalModel)\n\nnbModelPred <- predict(nbModel, newdata = test)\ntable(nbModelPred,test$suspicious)\n#Accuracy: 84.51%\n\n#nbModel2 <- train(suspicious~., data = train, method = \"naive_bayes\", tuneGrid = data.frame(fL=c(0,0.5,1.0), usekernel = TRUE, adjust=c(0,0.5,1.0), laplace = 0.5), trControl = trainControl)\n\nlibrary(dplyr)\nlibrary(ggraph)\nlibrary(igraph)\n\ntree_func <- function(final_model, \n                      tree_num) {\n  \n  # get tree by index\n  tree <- randomForest::getTree(final_model, \n                                k = tree_num, \n                                labelVar = TRUE) %>%\n    tibble::rownames_to_column() %>%\n    # make leaf split points to NA, so the 0s won't get plotted\n    mutate(`split point` = ifelse(is.na(prediction), `split point`, NA))\n  \n  # prepare data frame for graph\n  graph_frame <- data.frame(from = rep(tree$rowname, 2),\n                            to = c(tree$`left daughter`, tree$`right daughter`))\n  \n  # convert to graph and delete the last node that we don't want to plot\n  graph <- graph_from_data_frame(graph_frame) %>%\n    delete_vertices(\"0\")\n  \n  # set node labels\n  V(graph)$node_label <- gsub(\"_\", \" \", as.character(tree$`split var`))\n  V(graph)$leaf_label <- as.character(tree$prediction)\n  V(graph)$split <- as.character(round(tree$`split point`, digits = 2))\n  \n  # plot\n  plot <- ggraph(graph, 'dendrogram') + \n    theme_bw() +\n    geom_edge_link() +\n    geom_node_point() +\n    geom_node_text(aes(label = node_label), na.rm = TRUE, repel = TRUE) +\n    geom_node_label(aes(label = split), vjust = 2.5, na.rm = TRUE, fill = \"white\") +\n    geom_node_label(aes(label = leaf_label, fill = leaf_label), na.rm = TRUE, \n                    repel = TRUE, colour = \"white\", fontface = \"bold\", show.legend = FALSE) +\n    theme(panel.grid.minor = element_blank(),\n          panel.grid.major = element_blank(),\n          panel.background = element_blank(),\n          plot.background = element_rect(fill = \"white\"),\n          panel.border = element_blank(),\n          axis.line = element_blank(),\n          axis.text.x = element_blank(),\n          axis.text.y = element_blank(),\n          axis.ticks = element_blank(),\n          axis.title.x = element_blank(),\n          axis.title.y = element_blank(),\n          plot.title = element_text(size = 18))\n  \n  print(plot)\n}\n\nlibrary(forestFloor)\n#plot(forestFloor(randomForest(suspicious~., data = train, keep.inbag = T), X = trai\n\nlibrary(klaR)\nnaiveModel <- naiveBayes(suspicious~., data = train)\nplot(naiveModel)\n",
    "created" : 1523798753313.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3667768001",
    "id" : "D17D1772",
    "lastKnownWriteTime" : 1524651060,
    "last_content_update" : 1524651060,
    "path" : "C:/Users/Nishank/Desktop/SNU/Project/Suspicious/script.R",
    "project_path" : "script.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}